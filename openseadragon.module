<?php

/**
 * @file
 * Main functions and template preprocessor.
 */

use Drupal\file\Entity\File;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_libraries_info().
 */
function openseadragon_libraries_info() {
  $libraries['openseadragon'] = [
    'name' => 'OpenSeadragon plugin',
    'vendor url' => 'https://openseadragon.github.io/',
    'download url' => 'https://github.com/openseadragon/openseadragon/master/zipball',
    'version arguments' => [
      'file' => 'openseadragon.js',
      // //! openseadragon 2.2.1.
      'pattern' => '@openseadragon ([0-9\.-]+)@',
      'lines' => 1,
      'columns' => 50,
    ],
    'versions' => [
      '2.2.1' => [
        'files' => [
          'js' => [
            'openseadragon.js',
          ],
        ],
      ],
    ],
  ];
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function openseadragon_theme() {
  return [
    'openseadragon_formatter' => [
      'variables' => [
        'item' => NULL,
        'entity' => NULL,
        'settings' => NULL,
      ],
    ],
    'openseadragon_iiif_manifest_block' => [
      'variables' => [
        'iiif_manifest_url' => NULL,
      ],
    ],
  ];
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_openseadragon_formatter(&$variables) {
  $item = $variables['item'];
  $entity = $variables['entity'];
  // Load the global settings.
  $config = \Drupal::service('openseadragon.config');
  $fileinfo_service = \Drupal::service('openseadragon.fileinfo');

  // TODO: Once Libraries API is finished find a function for this.
  $base_library_path = 'sites/all/assets/vendor';

  $classes_array = ['openseadragon-viewer'];
  $viewer_settings = $config->getSettings(TRUE);
  $iiif_address = $config->getIiifAddress();
  if (is_null($iiif_address) || empty($iiif_address)) {
    return;
  }

  // Build the gallery id.
  $id = $entity->id();
  $openseadragon_viewer_id = 'openseadragon-viewer-' . $id;
  $field_name = $item->getParent()->getName();

  $tile_sources = [];
  $field_value = $entity->get($field_name)->getValue();
  foreach ($field_value as $value) {
    // Load the image and take file uri.
    if (isset($value['target_id'])) {
      $fid = $value['target_id'];
      $file = File::load($fid);
      $resource = $fileinfo_service->getFileData($file);
      if (isset($resource['full_path'])) {
        $tile_sources[] = rtrim($iiif_address, '/') . '/' . urlencode($resource['full_path']);
      }
    }
  }

  if (!empty($tile_sources)) {

    $viewer_settings['sequenceMode'] = count($tile_sources) > 1 && !$viewer_settings['collectionMode'];

    $variables['#attached']['drupalSettings']['openseadragon'] = [
      'basePath' => Url::fromUri($iiif_address),
      'fitToAspectRatio' => $viewer_settings['fit_to_aspect_ratio'],
      'options' => [
        'id' => $openseadragon_viewer_id,
        'prefixUrl' => file_url_transform_relative(file_create_url("{$base_library_path}/openseadragon/images/")),
        'tileSources' => $tile_sources,
      ] + $viewer_settings,
    ];

    $variables['attributes'] = new Attribute();
    $variables['attributes']['class'] = $classes_array;
    $variables['attributes']['id'] = $openseadragon_viewer_id;
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_openseadragon_iiif_manifest_block(&$variables) {
  // Load the global settings.
  $config = \Drupal::service('openseadragon.config');

  // TODO: Once Libraries API is finished find a function for this.
  $base_library_path = 'sites/all/assets/vendor';

  // Build the gallery id.
  $openseadragon_viewer_id = Html::getUniqueId('openseadragon-viewer-iiif-manifest-block');

  $classes_array = ['openseadragon-viewer'];
  $viewer_settings = $config->getSettings(TRUE);
  $iiif_address = $config->getIiifAddress();

  // Get the tile sources from the manifest.
  $parser = \Drupal::service('openseadragon.manifest_parser');
  $tile_sources = $parser->getTileSources($variables['iiif_manifest_url']);

  if (empty($tile_sources)) {
    return;
  }

  $viewer_settings['sequenceMode'] = count($tile_sources) > 1 && !$viewer_settings['collectionMode'];

  // Attach the viewer, using the image urls obtained from the manifest.
  if (!is_null($iiif_address) && !empty($iiif_address) && !empty($tile_sources)) {
    $variables['#attached']['drupalSettings']['openseadragon'] = [
      'basePath' => Url::fromUri($iiif_address),
      'fitToAspectRatio' => $viewer_settings['fit_to_aspect_ratio'],
      'options' => [
        'id' => $openseadragon_viewer_id,
        'prefixUrl' => file_url_transform_relative(file_create_url("{$base_library_path}/openseadragon/images/")),
        'tileSources' => $tile_sources,
      ] + $viewer_settings,
    ];

    $variables['attributes'] = new Attribute();
    $variables['attributes']['class'] = $classes_array;
    $variables['attributes']['id'] = $openseadragon_viewer_id;
  }

}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function islandora_image_file_mimetype_mapping_alter(&$mapping) {
  // Add new MIME type 'image/jp2'.
  if (!in_array('image/jp2', $mapping['mimetypes'])) {
    $mapping['mimetypes']['JP2'] = 'image/jp2';
    $mapping['extensions']['jp2'] = 'JP2';
  }
  // Add Tiff extensions.
  if (!in_array('image/tiff', $mapping['mimetypes'])) {
    $mapping['mimetypes']['TIFF'] = "image/tiff";
    $mapping['extensions']['tiff'] = 'TIFF';
  }
}
